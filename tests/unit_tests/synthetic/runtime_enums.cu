// RUN: %run_test hipify "%s" "%t" %hipify_args -D__CUDA_API_VERSION_INTERNAL %clang_args

// CHECK: #include <hip/hip_runtime.h>
#include <cuda_runtime_api.h>

int main() {
  printf("06. CUDA Runtime API Enums synthetic test\n");

  // CHECK: hipChannelFormatKind ChannelFormatKind;
  // CHECK-NEXT: hipChannelFormatKind ChannelFormatKindSigned = hipChannelFormatKindSigned;
  // CHECK-NEXT: hipChannelFormatKind ChannelFormatKindUnsigned = hipChannelFormatKindUnsigned;
  // CHECK-NEXT: hipChannelFormatKind ChannelFormatKindFloat = hipChannelFormatKindFloat;
  // CHECK-NEXT: hipChannelFormatKind ChannelFormatKindNone = hipChannelFormatKindNone;
  cudaChannelFormatKind ChannelFormatKind;
  cudaChannelFormatKind ChannelFormatKindSigned = cudaChannelFormatKindSigned;
  cudaChannelFormatKind ChannelFormatKindUnsigned = cudaChannelFormatKindUnsigned;
  cudaChannelFormatKind ChannelFormatKindFloat = cudaChannelFormatKindFloat;
  cudaChannelFormatKind ChannelFormatKindNone = cudaChannelFormatKindNone;

  // CHECK: hipComputeMode ComputeMode;
  // CHECK-NEXT: hipComputeMode ComputeModeDefault = hipComputeModeDefault;
  // CHECK-NEXT: hipComputeMode ComputeModeExclusive = hipComputeModeExclusive;
  // CHECK-NEXT: hipComputeMode ComputeModeProhibited = hipComputeModeProhibited;
  // CHECK-NEXT: hipComputeMode ComputeModeExclusiveProcess = hipComputeModeExclusiveProcess;
  cudaComputeMode ComputeMode;
  cudaComputeMode ComputeModeDefault = cudaComputeModeDefault;
  cudaComputeMode ComputeModeExclusive = cudaComputeModeExclusive;
  cudaComputeMode ComputeModeProhibited = cudaComputeModeProhibited;
  cudaComputeMode ComputeModeExclusiveProcess = cudaComputeModeExclusiveProcess;

  // CHECK: hipDeviceAttribute_t DeviceAttr;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxThreadsPerBlock = hipDeviceAttributeMaxThreadsPerBlock;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxBlockDimX = hipDeviceAttributeMaxBlockDimX;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxBlockDimY = hipDeviceAttributeMaxBlockDimY;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxBlockDimZ = hipDeviceAttributeMaxBlockDimZ;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxGridDimX = hipDeviceAttributeMaxGridDimX;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxGridDimY = hipDeviceAttributeMaxGridDimY;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxGridDimZ = hipDeviceAttributeMaxGridDimZ;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSharedMemoryPerBlock = hipDeviceAttributeMaxSharedMemoryPerBlock;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrTotalConstantMemory = hipDeviceAttributeTotalConstantMemory;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrWarpSize = hipDeviceAttributeWarpSize;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxPitch = hipDeviceAttributeMaxPitch;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxRegistersPerBlock = hipDeviceAttributeMaxRegistersPerBlock;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrClockRate = hipDeviceAttributeClockRate;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrTextureAlignment = hipDeviceAttributeTextureAlignment;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrGpuOverlap = hipDeviceAttributeAsyncEngineCount;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMultiProcessorCount = hipDeviceAttributeMultiprocessorCount;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrKernelExecTimeout = hipDeviceAttributeKernelExecTimeout;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrIntegrated = hipDeviceAttributeIntegrated;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrCanMapHostMemory = hipDeviceAttributeCanMapHostMemory;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrComputeMode = hipDeviceAttributeComputeMode;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture1DWidth = hipDeviceAttributeMaxTexture1DWidth;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DWidth = hipDeviceAttributeMaxTexture2DWidth;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DHeight = hipDeviceAttributeMaxTexture2DHeight;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture3DWidth = hipDeviceAttributeMaxTexture3DWidth;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture3DHeight = hipDeviceAttributeMaxTexture3DHeight;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture3DDepth = hipDeviceAttributeMaxTexture3DDepth;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DLayeredWidth = hipDeviceAttributeMaxTexture2DLayered;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DLayeredHeight = hipDeviceAttributeMaxTexture2DLayered;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrSurfaceAlignment = hipDeviceAttributeSurfaceAlignment;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrConcurrentKernels = hipDeviceAttributeConcurrentKernels;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrEccEnabled = hipDeviceAttributeEccEnabled;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrPciBusId = hipDeviceAttributePciBusId;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrPciDeviceId = hipDeviceAttributePciDeviceId;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrTccDriver = hipDeviceAttributeTccDriver;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMemoryClockRate = hipDeviceAttributeMemoryClockRate;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrGlobalMemoryBusWidth = hipDeviceAttributeMemoryBusWidth;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrL2CacheSize = hipDeviceAttributeL2CacheSize;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxThreadsPerMultiProcessor = hipDeviceAttributeMaxThreadsPerMultiProcessor;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrAsyncEngineCount = hipDeviceAttributeAsyncEngineCount;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrUnifiedAddressing = hipDeviceAttributeUnifiedAddressing;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture1DLayeredWidth = hipDeviceAttributeMaxTexture1DLayered;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DGatherWidth = hipDeviceAttributeMaxTexture2DGather;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DGatherHeight = hipDeviceAttributeMaxTexture2DGather;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture3DWidthAlt = hipDeviceAttributeMaxTexture3DAlt;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture3DHeightAlt = hipDeviceAttributeMaxTexture3DAlt;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture3DDepthAlt = hipDeviceAttributeMaxTexture3DAlt;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrPciDomainId = hipDeviceAttributePciDomainID;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrTexturePitchAlignment = hipDeviceAttributeTexturePitchAlignment;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTextureCubemapWidth = hipDeviceAttributeMaxTextureCubemap;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTextureCubemapLayeredWidth = hipDeviceAttributeMaxTextureCubemapLayered;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurface1DWidth = hipDeviceAttributeMaxSurface1D;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurface2DWidth = hipDeviceAttributeMaxSurface2D;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurface2DHeight = hipDeviceAttributeMaxSurface2D;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurface3DWidth = hipDeviceAttributeMaxSurface3D;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurface3DHeight = hipDeviceAttributeMaxSurface3D;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurface3DDepth = hipDeviceAttributeMaxSurface3D;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurface1DLayeredWidth = hipDeviceAttributeMaxSurface1DLayered;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurface2DLayeredWidth = hipDeviceAttributeMaxSurface2DLayered;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurface2DLayeredHeight = hipDeviceAttributeMaxSurface2DLayered;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurfaceCubemapWidth = hipDeviceAttributeMaxSurfaceCubemap;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSurfaceCubemapLayeredWidth = hipDeviceAttributeMaxSurfaceCubemapLayered;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture1DLinearWidth = hipDeviceAttributeMaxTexture1DLinear;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DLinearWidth = hipDeviceAttributeMaxTexture2DLinear;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DLinearHeight = hipDeviceAttributeMaxTexture2DLinear;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DLinearPitch = hipDeviceAttributeMaxTexture2DLinear;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DMipmappedWidth = hipDeviceAttributeMaxTexture2DMipmap;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture2DMipmappedHeight = hipDeviceAttributeMaxTexture2DMipmap;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrComputeCapabilityMajor = hipDeviceAttributeComputeCapabilityMajor;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrComputeCapabilityMinor = hipDeviceAttributeComputeCapabilityMinor;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxTexture1DMipmappedWidth = hipDeviceAttributeMaxTexture1DMipmap;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrStreamPrioritiesSupported = hipDeviceAttributeStreamPrioritiesSupported;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrGlobalL1CacheSupported = hipDeviceAttributeGlobalL1CacheSupported;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrLocalL1CacheSupported = hipDeviceAttributeLocalL1CacheSupported;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSharedMemoryPerMultiprocessor = hipDeviceAttributeMaxSharedMemoryPerMultiprocessor;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxRegistersPerMultiprocessor = hipDeviceAttributeMaxRegistersPerMultiprocessor;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrManagedMemory = hipDeviceAttributeManagedMemory;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrIsMultiGpuBoard = hipDeviceAttributeIsMultiGpuBoard;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMultiGpuBoardGroupID = hipDeviceAttributeMultiGpuBoardGroupID;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrHostNativeAtomicSupported = hipDeviceAttributeHostNativeAtomicSupported;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrSingleToDoublePrecisionPerfRatio = hipDeviceAttributeSingleToDoublePrecisionPerfRatio;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrPageableMemoryAccess = hipDeviceAttributePageableMemoryAccess;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrConcurrentManagedAccess = hipDeviceAttributeConcurrentManagedAccess;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrComputePreemptionSupported = hipDeviceAttributeComputePreemptionSupported;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrCanUseHostPointerForRegisteredMem = hipDeviceAttributeCanUseHostPointerForRegisteredMem;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrReserved94 = hipDeviceAttributeCanUseStreamWaitValue;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrCooperativeLaunch = hipDeviceAttributeCooperativeLaunch;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrCooperativeMultiDeviceLaunch = hipDeviceAttributeCooperativeMultiDeviceLaunch;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxSharedMemoryPerBlockOptin = hipDeviceAttributeSharedMemPerBlockOptin;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrPageableMemoryAccessUsesHostPageTables = hipDeviceAttributePageableMemoryAccessUsesHostPageTables;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrDirectManagedMemAccessFromHost = hipDeviceAttributeDirectManagedMemAccessFromHost;
  // CHECK-NEXT: hipDeviceAttribute_t DevAttrMaxBlocksPerMultiprocessor = hipDeviceAttributeMaxBlocksPerMultiprocessor;
  cudaDeviceAttr DeviceAttr;
  cudaDeviceAttr DevAttrMaxThreadsPerBlock = cudaDevAttrMaxThreadsPerBlock;
  cudaDeviceAttr DevAttrMaxBlockDimX = cudaDevAttrMaxBlockDimX;
  cudaDeviceAttr DevAttrMaxBlockDimY = cudaDevAttrMaxBlockDimY;
  cudaDeviceAttr DevAttrMaxBlockDimZ = cudaDevAttrMaxBlockDimZ;
  cudaDeviceAttr DevAttrMaxGridDimX = cudaDevAttrMaxGridDimX;
  cudaDeviceAttr DevAttrMaxGridDimY = cudaDevAttrMaxGridDimY;
  cudaDeviceAttr DevAttrMaxGridDimZ = cudaDevAttrMaxGridDimZ;
  cudaDeviceAttr DevAttrMaxSharedMemoryPerBlock = cudaDevAttrMaxSharedMemoryPerBlock;
  cudaDeviceAttr DevAttrTotalConstantMemory = cudaDevAttrTotalConstantMemory;
  cudaDeviceAttr DevAttrWarpSize = cudaDevAttrWarpSize;
  cudaDeviceAttr DevAttrMaxPitch = cudaDevAttrMaxPitch;
  cudaDeviceAttr DevAttrMaxRegistersPerBlock = cudaDevAttrMaxRegistersPerBlock;
  cudaDeviceAttr DevAttrClockRate = cudaDevAttrClockRate;
  cudaDeviceAttr DevAttrTextureAlignment = cudaDevAttrTextureAlignment;
  cudaDeviceAttr DevAttrGpuOverlap = cudaDevAttrGpuOverlap;
  cudaDeviceAttr DevAttrMultiProcessorCount = cudaDevAttrMultiProcessorCount;
  cudaDeviceAttr DevAttrKernelExecTimeout = cudaDevAttrKernelExecTimeout;
  cudaDeviceAttr DevAttrIntegrated = cudaDevAttrIntegrated;
  cudaDeviceAttr DevAttrCanMapHostMemory = cudaDevAttrCanMapHostMemory;
  cudaDeviceAttr DevAttrComputeMode = cudaDevAttrComputeMode;
  cudaDeviceAttr DevAttrMaxTexture1DWidth = cudaDevAttrMaxTexture1DWidth;
  cudaDeviceAttr DevAttrMaxTexture2DWidth = cudaDevAttrMaxTexture2DWidth;
  cudaDeviceAttr DevAttrMaxTexture2DHeight = cudaDevAttrMaxTexture2DHeight;
  cudaDeviceAttr DevAttrMaxTexture3DWidth = cudaDevAttrMaxTexture3DWidth;
  cudaDeviceAttr DevAttrMaxTexture3DHeight = cudaDevAttrMaxTexture3DHeight;
  cudaDeviceAttr DevAttrMaxTexture3DDepth = cudaDevAttrMaxTexture3DDepth;
  cudaDeviceAttr DevAttrMaxTexture2DLayeredWidth = cudaDevAttrMaxTexture2DLayeredWidth;
  cudaDeviceAttr DevAttrMaxTexture2DLayeredHeight = cudaDevAttrMaxTexture2DLayeredHeight;
  cudaDeviceAttr DevAttrSurfaceAlignment = cudaDevAttrSurfaceAlignment;
  cudaDeviceAttr DevAttrConcurrentKernels = cudaDevAttrConcurrentKernels;
  cudaDeviceAttr DevAttrEccEnabled = cudaDevAttrEccEnabled;
  cudaDeviceAttr DevAttrPciBusId = cudaDevAttrPciBusId;
  cudaDeviceAttr DevAttrPciDeviceId = cudaDevAttrPciDeviceId;
  cudaDeviceAttr DevAttrTccDriver = cudaDevAttrTccDriver;
  cudaDeviceAttr DevAttrMemoryClockRate = cudaDevAttrMemoryClockRate;
  cudaDeviceAttr DevAttrGlobalMemoryBusWidth = cudaDevAttrGlobalMemoryBusWidth;
  cudaDeviceAttr DevAttrL2CacheSize = cudaDevAttrL2CacheSize;
  cudaDeviceAttr DevAttrMaxThreadsPerMultiProcessor = cudaDevAttrMaxThreadsPerMultiProcessor;
  cudaDeviceAttr DevAttrAsyncEngineCount = cudaDevAttrAsyncEngineCount;
  cudaDeviceAttr DevAttrUnifiedAddressing = cudaDevAttrUnifiedAddressing;
  cudaDeviceAttr DevAttrMaxTexture1DLayeredWidth = cudaDevAttrMaxTexture1DLayeredWidth;
  cudaDeviceAttr DevAttrMaxTexture2DGatherWidth = cudaDevAttrMaxTexture2DGatherWidth;
  cudaDeviceAttr DevAttrMaxTexture2DGatherHeight = cudaDevAttrMaxTexture2DGatherHeight;
  cudaDeviceAttr DevAttrMaxTexture3DWidthAlt = cudaDevAttrMaxTexture3DWidthAlt;
  cudaDeviceAttr DevAttrMaxTexture3DHeightAlt = cudaDevAttrMaxTexture3DHeightAlt;
  cudaDeviceAttr DevAttrMaxTexture3DDepthAlt = cudaDevAttrMaxTexture3DDepthAlt;
  cudaDeviceAttr DevAttrPciDomainId = cudaDevAttrPciDomainId;
  cudaDeviceAttr DevAttrTexturePitchAlignment = cudaDevAttrTexturePitchAlignment;
  cudaDeviceAttr DevAttrMaxTextureCubemapWidth = cudaDevAttrMaxTextureCubemapWidth;
  cudaDeviceAttr DevAttrMaxTextureCubemapLayeredWidth = cudaDevAttrMaxTextureCubemapLayeredWidth;
  cudaDeviceAttr DevAttrMaxSurface1DWidth = cudaDevAttrMaxSurface1DWidth;
  cudaDeviceAttr DevAttrMaxSurface2DWidth = cudaDevAttrMaxSurface2DWidth;
  cudaDeviceAttr DevAttrMaxSurface2DHeight = cudaDevAttrMaxSurface2DHeight;
  cudaDeviceAttr DevAttrMaxSurface3DWidth = cudaDevAttrMaxSurface3DWidth;
  cudaDeviceAttr DevAttrMaxSurface3DHeight = cudaDevAttrMaxSurface3DHeight;
  cudaDeviceAttr DevAttrMaxSurface3DDepth = cudaDevAttrMaxSurface3DDepth;
  cudaDeviceAttr DevAttrMaxSurface1DLayeredWidth = cudaDevAttrMaxSurface1DLayeredWidth;
  cudaDeviceAttr DevAttrMaxSurface2DLayeredWidth = cudaDevAttrMaxSurface2DLayeredWidth;
  cudaDeviceAttr DevAttrMaxSurface2DLayeredHeight = cudaDevAttrMaxSurface2DLayeredHeight;
  cudaDeviceAttr DevAttrMaxSurfaceCubemapWidth = cudaDevAttrMaxSurfaceCubemapWidth;
  cudaDeviceAttr DevAttrMaxSurfaceCubemapLayeredWidth = cudaDevAttrMaxSurfaceCubemapLayeredWidth;
  cudaDeviceAttr DevAttrMaxTexture1DLinearWidth = cudaDevAttrMaxTexture1DLinearWidth;
  cudaDeviceAttr DevAttrMaxTexture2DLinearWidth = cudaDevAttrMaxTexture2DLinearWidth;
  cudaDeviceAttr DevAttrMaxTexture2DLinearHeight = cudaDevAttrMaxTexture2DLinearHeight;
  cudaDeviceAttr DevAttrMaxTexture2DLinearPitch = cudaDevAttrMaxTexture2DLinearPitch;
  cudaDeviceAttr DevAttrMaxTexture2DMipmappedWidth = cudaDevAttrMaxTexture2DMipmappedWidth;
  cudaDeviceAttr DevAttrMaxTexture2DMipmappedHeight = cudaDevAttrMaxTexture2DMipmappedHeight;
  cudaDeviceAttr DevAttrComputeCapabilityMajor = cudaDevAttrComputeCapabilityMajor;
  cudaDeviceAttr DevAttrComputeCapabilityMinor = cudaDevAttrComputeCapabilityMinor;
  cudaDeviceAttr DevAttrMaxTexture1DMipmappedWidth = cudaDevAttrMaxTexture1DMipmappedWidth;
  cudaDeviceAttr DevAttrStreamPrioritiesSupported = cudaDevAttrStreamPrioritiesSupported;
  cudaDeviceAttr DevAttrGlobalL1CacheSupported = cudaDevAttrGlobalL1CacheSupported;
  cudaDeviceAttr DevAttrLocalL1CacheSupported = cudaDevAttrLocalL1CacheSupported;
  cudaDeviceAttr DevAttrMaxSharedMemoryPerMultiprocessor = cudaDevAttrMaxSharedMemoryPerMultiprocessor;
  cudaDeviceAttr DevAttrMaxRegistersPerMultiprocessor = cudaDevAttrMaxRegistersPerMultiprocessor;
  cudaDeviceAttr DevAttrManagedMemory = cudaDevAttrManagedMemory;
  cudaDeviceAttr DevAttrIsMultiGpuBoard = cudaDevAttrIsMultiGpuBoard;
  cudaDeviceAttr DevAttrMultiGpuBoardGroupID = cudaDevAttrMultiGpuBoardGroupID;
  cudaDeviceAttr DevAttrHostNativeAtomicSupported = cudaDevAttrHostNativeAtomicSupported;
  cudaDeviceAttr DevAttrSingleToDoublePrecisionPerfRatio = cudaDevAttrSingleToDoublePrecisionPerfRatio;
  cudaDeviceAttr DevAttrPageableMemoryAccess = cudaDevAttrPageableMemoryAccess;
  cudaDeviceAttr DevAttrConcurrentManagedAccess = cudaDevAttrConcurrentManagedAccess;
  cudaDeviceAttr DevAttrComputePreemptionSupported = cudaDevAttrComputePreemptionSupported;
  cudaDeviceAttr DevAttrCanUseHostPointerForRegisteredMem = cudaDevAttrCanUseHostPointerForRegisteredMem;
  cudaDeviceAttr DevAttrReserved94 = cudaDevAttrReserved94;
  cudaDeviceAttr DevAttrCooperativeLaunch = cudaDevAttrCooperativeLaunch;
  cudaDeviceAttr DevAttrCooperativeMultiDeviceLaunch = cudaDevAttrCooperativeMultiDeviceLaunch;
  cudaDeviceAttr DevAttrMaxSharedMemoryPerBlockOptin = cudaDevAttrMaxSharedMemoryPerBlockOptin;
  cudaDeviceAttr DevAttrPageableMemoryAccessUsesHostPageTables = cudaDevAttrPageableMemoryAccessUsesHostPageTables;
  cudaDeviceAttr DevAttrDirectManagedMemAccessFromHost = cudaDevAttrDirectManagedMemAccessFromHost;
  cudaDeviceAttr DevAttrMaxBlocksPerMultiprocessor = cudaDevAttrMaxBlocksPerMultiprocessor;

  return 0;
}
